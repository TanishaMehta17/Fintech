import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.whiteA700,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray50001.withOpacity(0.15),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: colorScheme.secondaryContainer,
          fontSize: 17.fSize,
          fontFamily: 'Arial',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray50001,
          fontSize: 15.fSize,
          fontFamily: 'Arial',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.blueGray900,
          fontSize: 9.fSize,
          fontFamily: 'Arial',
          fontWeight: FontWeight.w400,
        ),
        displaySmall: TextStyle(
          color: appTheme.blueGray900,
          fontSize: 36.fSize,
          fontFamily: 'Arial',
          fontWeight: FontWeight.w700,
        ),
        headlineLarge: TextStyle(
          color: colorScheme.primary,
          fontSize: 32.fSize,
          fontFamily: 'Arial',
          fontWeight: FontWeight.w700,
        ),
        headlineMedium: TextStyle(
          color: appTheme.blueGray900,
          fontSize: 26.fSize,
          fontFamily: 'Arial',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.primary,
          fontSize: 24.fSize,
          fontFamily: 'Arial',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 12.fSize,
          fontFamily: 'Arial',
          fontWeight: FontWeight.w700,
        ),
        labelSmall: TextStyle(
          color: appTheme.blueGray900,
          fontSize: 9.fSize,
          fontFamily: 'Arial',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 20.fSize,
          fontFamily: 'Arial',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: colorScheme.secondaryContainer,
          fontSize: 18.fSize,
          fontFamily: 'Arial',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: appTheme.black90003.withOpacity(0.5),
          fontSize: 15.fSize,
          fontFamily: 'Arial',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFFF6262),
    primaryContainer: Color(0XFF202A34),
    secondary: Color(0XFF202A34),
    secondaryContainer: Color(0XFF8E949A),
    tertiary: Color(0XFF202A34),
    tertiaryContainer: Color(0XFF8E949A),

    // Background colors
    background: Color(0XFF202A34),

    // Surface colors
    surface: Color(0XFF202A34),
    surfaceTint: Color(0XFF141414),
    surfaceVariant: Color(0XFF8E949A),

    // Error colors
    error: Color(0XFF141414),
    errorContainer: Color(0XFF4F5962),
    onError: Color(0X26FF6565),
    onErrorContainer: Color(0XFF0A0A0A),

    // On colors(text colors)
    onBackground: Color(0XFFE8E9EB),
    onInverseSurface: Color(0X26FF6565),
    onPrimary: Color(0XFF141414),
    onPrimaryContainer: Color(0XFFE8E9EB),
    onSecondary: Color(0XFFE8E9EB),
    onSecondaryContainer: Color(0X0F101828),
    onTertiary: Color(0XFFE8E9EB),
    onTertiaryContainer: Color(0X0F101828),

    // Other colors
    outline: Color(0XFF141414),
    outlineVariant: Color(0XFF202A34),
    scrim: Color(0XFF202A34),
    shadow: Color(0XFF141414),

    // Inverse colors
    inversePrimary: Color(0XFF202A34),
    inverseSurface: Color(0XFF141414),

    // Pending colors
    onSurface: Color(0XFFE8E9EB),
    onSurfaceVariant: Color(0X0F101828),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber300 => Color(0XFFF8C74E);
  Color get amber500 => Color(0XFFFFBE19);

  // Black
  Color get black900 => Color(0XFF010101);
  Color get black90001 => Color(0XFF101011);
  Color get black90002 => Color(0XFF0D0E0E);
  Color get black90003 => Color(0XFF000000);

  // Blue
  Color get blue100 => Color(0XFFC5D2FF);

  // BlueGray
  Color get blueGray100 => Color(0XFFD6D7DA);
  Color get blueGray10001 => Color(0XFFD9D9D9);
  Color get blueGray10002 => Color(0XFFCDCFD2);
  Color get blueGray10003 => Color(0XFFC8CBCE);
  Color get blueGray200 => Color(0XFFB4B2C8);
  Color get blueGray20001 => Color(0XFFB5B5C3);
  Color get blueGray400 => Color(0XFF83898F);
  Color get blueGray40001 => Color(0XFF888888);
  Color get blueGray50 => Color(0XFFE9EFF4);
  Color get blueGray50011 => Color(0X116E7588);
  Color get blueGray800 => Color(0XFF303D47);
  Color get blueGray900 => Color(0XFF23303B);

  // DeepOrange
  Color get deepOrange50 => Color(0XFFF4E7E9);
  Color get deepOrange5001 => Color(0XFFFFE8E8);

  // Gray
  Color get gray100 => Color(0XFFF1F2F3);
  Color get gray10001 => Color(0XFFF5F5F5);
  Color get gray40026 => Color(0X26C1C4C7);
  Color get gray50 => Color(0XFFF9F9FB);
  Color get gray500 => Color(0XFF9A9FA4);
  Color get gray50001 => Color(0XFFA4A9AE);
  Color get gray600 => Color(0XFF727A81);
  Color get gray700 => Color(0XFF565866);

  // Green
  Color get green800 => Color(0XFF0C972A);

  // Indigof
  Color get indigo503f => Color(0X3FEBEDF6);

  // Indigo
  Color get indigoA100 => Color(0XFF9CB2FF);
  Color get indigoA200 => Color(0XFF4B78FE);
  Color get indigoA20001 => Color(0XFF456EFE);

  // Orange
  Color get orange700 => Color(0XFFFF7A00);

  // Pink
  Color get pink200 => Color(0XFFFFA5AB);

  // Red
  Color get red100 => Color(0XFFFFC9C9);
  Color get red50 => Color(0XFFFFF2F3);
  Color get red600 => Color(0XFFE73726);
  Color get redA100 => Color(0XFFFF8686);
  Color get redA20066 => Color(0X66FF6363);

  // Teal
  Color get teal30067 => Color(0X6751D7B4);
  Color get teal400 => Color(0XFF2DC688);
  Color get teal50 => Color(0XFFDCF7F0);
  Color get tealA700 => Color(0XFF13C898);
  Color get tealA70001 => Color(0XFF13C999);
  Color get tealA70002 => Color(0XFF1CCD9D);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);
  Color get whiteA70001 => Color(0XFFFCFBFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
